// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("Game")]
public abstract class OwnerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _color;
    
    public override System.Type ViewModelType {
        get {
            return typeof(OwnerViewModel);
        }
    }
    
    public OwnerViewModel Owner {
        get {
            return ((OwnerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<OwnerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        OwnerViewModel owner = ((OwnerViewModel)(viewModel));
        owner.color = this._color;
    }
}

[DiagramInfoAttribute("Game")]
public abstract class MapNodeViewBase : EntityViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _owner;
    
    public override System.Type ViewModelType {
        get {
            return typeof(MapNodeViewModel);
        }
    }
    
    public MapNodeViewModel MapNode {
        get {
            return ((MapNodeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MapNodeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        MapNodeViewModel mapNode = ((MapNodeViewModel)(viewModel));
        mapNode.owner = this._owner == null ? null : this._owner.ViewModelObject as OwnerViewModel;
    }
}

[DiagramInfoAttribute("Game")]
public abstract class CityNodeViewBase : MapNodeViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(CityNodeViewModel);
        }
    }
    
    public CityNodeViewModel CityNode {
        get {
            return ((CityNodeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CityNodeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("Game")]
public abstract class CaveNodeViewBase : MapNodeViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(CaveNodeViewModel);
        }
    }
    
    public CaveNodeViewModel CaveNode {
        get {
            return ((CaveNodeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CaveNodeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("Game")]
public abstract class UnitViewBase : EntityViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _owner;
    
    public override System.Type ViewModelType {
        get {
            return typeof(UnitViewModel);
        }
    }
    
    public UnitViewModel Unit {
        get {
            return ((UnitViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        UnitViewModel unit = ((UnitViewModel)(viewModel));
        unit.owner = this._owner == null ? null : this._owner.ViewModelObject as OwnerViewModel;
    }
}

[DiagramInfoAttribute("Game")]
public abstract class CityCellViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _unit;
    
    public override System.Type ViewModelType {
        get {
            return typeof(CityCellViewModel);
        }
    }
    
    public CityCellViewModel CityCell {
        get {
            return ((CityCellViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CityCellController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        CityCellViewModel cityCell = ((CityCellViewModel)(viewModel));
        cityCell.unit = this._unit == null ? null : this._unit.ViewModelObject as UnitViewModel;
    }
}

[DiagramInfoAttribute("Game")]
public abstract class EntityViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _attack;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _defence;
    
    public override System.Type ViewModelType {
        get {
            return typeof(EntityViewModel);
        }
    }
    
    public EntityViewModel Entity {
        get {
            return ((EntityViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<EntityController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        EntityViewModel entity = ((EntityViewModel)(viewModel));
        entity.attack = this._attack;
        entity.defence = this._defence;
    }
    
    public virtual void ExecuteTakeDamage(Int32 arg) {
        this.ExecuteCommand(Entity.TakeDamage, arg);
    }
}
