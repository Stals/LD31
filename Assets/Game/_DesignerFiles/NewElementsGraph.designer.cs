// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("Game")]
public class OwnerViewModelBase : ViewModel {
    
    public P<Vector3> _colorProperty;
    
    public OwnerViewModelBase(OwnerControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public OwnerViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _colorProperty = new P<Vector3>(this, "color");
    }
}

public partial class OwnerViewModel : OwnerViewModelBase {
    
    private MapNodeViewModel _ParentMapNode;
    
    private UnitViewModel _ParentUnit;
    
    public OwnerViewModel(OwnerControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public OwnerViewModel() : 
            base() {
    }
    
    public virtual P<Vector3> colorProperty {
        get {
            return this._colorProperty;
        }
    }
    
    public virtual Vector3 color {
        get {
            return _colorProperty.Value;
        }
        set {
            _colorProperty.Value = value;
        }
    }
    
    public virtual MapNodeViewModel ParentMapNode {
        get {
            return this._ParentMapNode;
        }
        set {
            _ParentMapNode = value;
        }
    }
    
    public virtual UnitViewModel ParentUnit {
        get {
            return this._ParentUnit;
        }
        set {
            _ParentUnit = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeVector3("color", this.color);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.color = stream.DeserializeVector3("color");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_colorProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("Game")]
public class MapNodeViewModelBase : EntityViewModel {
    
    public P<OwnerViewModel> _ownerProperty;
    
    public P<Boolean> _isVisibleProperty;
    
    public ModelCollection<PathViewModel> _connectionsProperty;
    
    public MapNodeViewModelBase(MapNodeControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public MapNodeViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _ownerProperty = new P<OwnerViewModel>(this, "owner");
        _isVisibleProperty = new P<Boolean>(this, "isVisible");
        _connectionsProperty = new ModelCollection<PathViewModel>(this, "connections");
        _connectionsProperty.CollectionChanged += connectionsCollectionChanged;
    }
    
    protected virtual void connectionsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
}

public partial class MapNodeViewModel : MapNodeViewModelBase {
    
    private MapViewModel _ParentMap;
    
    private PathViewModel _ParentPath;
    
    public MapNodeViewModel(MapNodeControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public MapNodeViewModel() : 
            base() {
    }
    
    public virtual P<OwnerViewModel> ownerProperty {
        get {
            return this._ownerProperty;
        }
    }
    
    public virtual OwnerViewModel owner {
        get {
            return _ownerProperty.Value;
        }
        set {
            _ownerProperty.Value = value;
            if (value != null) value.ParentMapNode = this;
        }
    }
    
    public virtual P<Boolean> isVisibleProperty {
        get {
            return this._isVisibleProperty;
        }
    }
    
    public virtual Boolean isVisible {
        get {
            return _isVisibleProperty.Value;
        }
        set {
            _isVisibleProperty.Value = value;
        }
    }
    
    public virtual ModelCollection<PathViewModel> connections {
        get {
            return this._connectionsProperty;
        }
    }
    
    public virtual MapViewModel ParentMap {
        get {
            return this._ParentMap;
        }
        set {
            _ParentMap = value;
        }
    }
    
    public virtual PathViewModel ParentPath {
        get {
            return this._ParentPath;
        }
        set {
            _ParentPath = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		if (stream.DeepSerialize) stream.SerializeObject("owner", this.owner);
        stream.SerializeBool("isVisible", this.isVisible);
        if (stream.DeepSerialize) stream.SerializeArray("connections", this.connections);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		if (stream.DeepSerialize) this.owner = stream.DeserializeObject<OwnerViewModel>("owner");
        		this.isVisible = stream.DeserializeBool("isVisible");;
if (stream.DeepSerialize) {
        this.connections.Clear();
        this.connections.AddRange(stream.DeserializeObjectArray<PathViewModel>("connections"));
}
    }
    
    public override void Unbind() {
        base.Unbind();
        _connectionsProperty.CollectionChanged -= connectionsCollectionChanged;
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_ownerProperty, true, false, false));
        list.Add(new ViewModelPropertyInfo(_isVisibleProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_connectionsProperty, true, true, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
    
    protected override void connectionsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
        foreach (var item in args.OldItems.OfType<PathViewModel>()) item.ParentMapNode = null;;
        foreach (var item in args.NewItems.OfType<PathViewModel>()) item.ParentMapNode = this;;
    }
}

[DiagramInfoAttribute("Game")]
public class CityNodeViewModelBase : MapNodeViewModel {
    
    public ModelCollection<CityCellViewModel> _cellsProperty;
    
    public CityNodeViewModelBase(CityNodeControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public CityNodeViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _cellsProperty = new ModelCollection<CityCellViewModel>(this, "cells");
        _cellsProperty.CollectionChanged += cellsCollectionChanged;
    }
    
    protected virtual void cellsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
}

public partial class CityNodeViewModel : CityNodeViewModelBase {
    
    public CityNodeViewModel(CityNodeControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public CityNodeViewModel() : 
            base() {
    }
    
    public virtual ModelCollection<CityCellViewModel> cells {
        get {
            return this._cellsProperty;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        if (stream.DeepSerialize) stream.SerializeArray("cells", this.cells);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
if (stream.DeepSerialize) {
        this.cells.Clear();
        this.cells.AddRange(stream.DeserializeObjectArray<CityCellViewModel>("cells"));
}
    }
    
    public override void Unbind() {
        base.Unbind();
        _cellsProperty.CollectionChanged -= cellsCollectionChanged;
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_cellsProperty, true, true, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
    
    protected override void cellsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
        foreach (var item in args.OldItems.OfType<CityCellViewModel>()) item.ParentCityNode = null;;
        foreach (var item in args.NewItems.OfType<CityCellViewModel>()) item.ParentCityNode = this;;
    }
}

[DiagramInfoAttribute("Game")]
public class CaveNodeViewModelBase : MapNodeViewModel {
    
    public CaveNodeViewModelBase(CaveNodeControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public CaveNodeViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class CaveNodeViewModel : CaveNodeViewModelBase {
    
    public CaveNodeViewModel(CaveNodeControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public CaveNodeViewModel() : 
            base() {
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("Game")]
public class UnitViewModelBase : EntityViewModel {
    
    public P<OwnerViewModel> _ownerProperty;
    
    public UnitViewModelBase(UnitControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public UnitViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _ownerProperty = new P<OwnerViewModel>(this, "owner");
    }
}

public partial class UnitViewModel : UnitViewModelBase {
    
    private CityCellViewModel _ParentCityCell;
    
    public UnitViewModel(UnitControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public UnitViewModel() : 
            base() {
    }
    
    public virtual P<OwnerViewModel> ownerProperty {
        get {
            return this._ownerProperty;
        }
    }
    
    public virtual OwnerViewModel owner {
        get {
            return _ownerProperty.Value;
        }
        set {
            _ownerProperty.Value = value;
            if (value != null) value.ParentUnit = this;
        }
    }
    
    public virtual CityCellViewModel ParentCityCell {
        get {
            return this._ParentCityCell;
        }
        set {
            _ParentCityCell = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		if (stream.DeepSerialize) stream.SerializeObject("owner", this.owner);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		if (stream.DeepSerialize) this.owner = stream.DeserializeObject<OwnerViewModel>("owner");
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_ownerProperty, true, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("Game")]
public class CityCellViewModelBase : ViewModel {
    
    public P<UnitViewModel> _unitProperty;
    
    public CityCellViewModelBase(CityCellControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public CityCellViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _unitProperty = new P<UnitViewModel>(this, "unit");
    }
}

public partial class CityCellViewModel : CityCellViewModelBase {
    
    private CityNodeViewModel _ParentCityNode;
    
    public CityCellViewModel(CityCellControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public CityCellViewModel() : 
            base() {
    }
    
    public virtual P<UnitViewModel> unitProperty {
        get {
            return this._unitProperty;
        }
    }
    
    public virtual UnitViewModel unit {
        get {
            return _unitProperty.Value;
        }
        set {
            _unitProperty.Value = value;
            if (value != null) value.ParentCityCell = this;
        }
    }
    
    public virtual CityNodeViewModel ParentCityNode {
        get {
            return this._ParentCityNode;
        }
        set {
            _ParentCityNode = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		if (stream.DeepSerialize) stream.SerializeObject("unit", this.unit);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		if (stream.DeepSerialize) this.unit = stream.DeserializeObject<UnitViewModel>("unit");
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_unitProperty, true, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}

[DiagramInfoAttribute("Game")]
public class EntityViewModelBase : ViewModel {
    
    public P<Int32> _attackProperty;
    
    public P<Int32> _defenceProperty;
    
    public P<ActionViewModel> _attackDelayProperty;
    
    protected CommandWithSenderAndArgument<EntityViewModel, Int32> _TakeDamage;
    
    public EntityViewModelBase(EntityControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public EntityViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _attackProperty = new P<Int32>(this, "attack");
        _defenceProperty = new P<Int32>(this, "defence");
        _attackDelayProperty = new P<ActionViewModel>(this, "attackDelay");
    }
}

public partial class EntityViewModel : EntityViewModelBase {
    
    public EntityViewModel(EntityControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public EntityViewModel() : 
            base() {
    }
    
    public virtual P<Int32> attackProperty {
        get {
            return this._attackProperty;
        }
    }
    
    public virtual Int32 attack {
        get {
            return _attackProperty.Value;
        }
        set {
            _attackProperty.Value = value;
        }
    }
    
    public virtual P<Int32> defenceProperty {
        get {
            return this._defenceProperty;
        }
    }
    
    public virtual Int32 defence {
        get {
            return _defenceProperty.Value;
        }
        set {
            _defenceProperty.Value = value;
        }
    }
    
    public virtual P<ActionViewModel> attackDelayProperty {
        get {
            return this._attackDelayProperty;
        }
    }
    
    public virtual ActionViewModel attackDelay {
        get {
            return _attackDelayProperty.Value;
        }
        set {
            _attackDelayProperty.Value = value;
            if (value != null) value.ParentEntity = this;
        }
    }
    
    public virtual CommandWithSenderAndArgument<EntityViewModel, Int32> TakeDamage {
        get {
            return _TakeDamage;
        }
        set {
            _TakeDamage = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var entity = controller as EntityControllerBase;
        this.TakeDamage = new CommandWithSenderAndArgument<EntityViewModel, Int32>(this, entity.TakeDamage);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeInt("attack", this.attack);
        stream.SerializeInt("defence", this.defence);
		if (stream.DeepSerialize) stream.SerializeObject("attackDelay", this.attackDelay);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.attack = stream.DeserializeInt("attack");;
        		this.defence = stream.DeserializeInt("defence");;
		if (stream.DeepSerialize) this.attackDelay = stream.DeserializeObject<ActionViewModel>("attackDelay");
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_attackProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_defenceProperty, false, false, false));
        list.Add(new ViewModelPropertyInfo(_attackDelayProperty, true, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("TakeDamage", TakeDamage) { ParameterType = typeof(Int32) });
    }
}

[DiagramInfoAttribute("Game")]
public class MapViewModelBase : ViewModel {
    
    public ModelCollection<MapNodeViewModel> _nodesProperty;
    
    public MapViewModelBase(MapControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public MapViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _nodesProperty = new ModelCollection<MapNodeViewModel>(this, "nodes");
        _nodesProperty.CollectionChanged += nodesCollectionChanged;
    }
    
    protected virtual void nodesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
    }
}

public partial class MapViewModel : MapViewModelBase {
    
    public MapViewModel(MapControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public MapViewModel() : 
            base() {
    }
    
    public virtual ModelCollection<MapNodeViewModel> nodes {
        get {
            return this._nodesProperty;
        }
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        if (stream.DeepSerialize) stream.SerializeArray("nodes", this.nodes);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
if (stream.DeepSerialize) {
        this.nodes.Clear();
        this.nodes.AddRange(stream.DeserializeObjectArray<MapNodeViewModel>("nodes"));
}
    }
    
    public override void Unbind() {
        base.Unbind();
        _nodesProperty.CollectionChanged -= nodesCollectionChanged;
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_nodesProperty, true, true, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
    
    protected override void nodesCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) {
        foreach (var item in args.OldItems.OfType<MapNodeViewModel>()) item.ParentMap = null;;
        foreach (var item in args.NewItems.OfType<MapNodeViewModel>()) item.ParentMap = this;;
    }
}

[DiagramInfoAttribute("Game")]
public class ActionViewModelBase : ViewModel {
    
    public P<Single> _delayProperty;
    
    protected CommandWithSender<ActionViewModel> _Excecute;
    
    public ActionViewModelBase(ActionControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public ActionViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _delayProperty = new P<Single>(this, "delay");
    }
}

public partial class ActionViewModel : ActionViewModelBase {
    
    private EntityViewModel _ParentEntity;
    
    public ActionViewModel(ActionControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public ActionViewModel() : 
            base() {
    }
    
    public virtual P<Single> delayProperty {
        get {
            return this._delayProperty;
        }
    }
    
    public virtual Single delay {
        get {
            return _delayProperty.Value;
        }
        set {
            _delayProperty.Value = value;
        }
    }
    
    public virtual CommandWithSender<ActionViewModel> Excecute {
        get {
            return _Excecute;
        }
        set {
            _Excecute = value;
        }
    }
    
    public virtual EntityViewModel ParentEntity {
        get {
            return this._ParentEntity;
        }
        set {
            _ParentEntity = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        var action = controller as ActionControllerBase;
        this.Excecute = new CommandWithSender<ActionViewModel>(this, action.Excecute);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
        stream.SerializeFloat("delay", this.delay);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
        		this.delay = stream.DeserializeFloat("delay");;
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_delayProperty, false, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
        list.Add(new ViewModelCommandInfo("Excecute", Excecute) { ParameterType = typeof(void) });
    }
}

[DiagramInfoAttribute("Game")]
public class PathViewModelBase : ViewModel {
    
    public P<MapNodeViewModel> _node1Property;
    
    public P<MapNodeViewModel> _node2Property;
    
    public PathViewModelBase(PathControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PathViewModelBase() : 
            base() {
    }
    
    public override void Bind() {
        base.Bind();
        _node1Property = new P<MapNodeViewModel>(this, "node1");
        _node2Property = new P<MapNodeViewModel>(this, "node2");
    }
}

public partial class PathViewModel : PathViewModelBase {
    
    private MapNodeViewModel _ParentMapNode;
    
    public PathViewModel(PathControllerBase controller, bool initialize = true) : 
            base(controller, initialize) {
    }
    
    public PathViewModel() : 
            base() {
    }
    
    public virtual P<MapNodeViewModel> node1Property {
        get {
            return this._node1Property;
        }
    }
    
    public virtual MapNodeViewModel node1 {
        get {
            return _node1Property.Value;
        }
        set {
            _node1Property.Value = value;
            if (value != null) value.ParentPath = this;
        }
    }
    
    public virtual P<MapNodeViewModel> node2Property {
        get {
            return this._node2Property;
        }
    }
    
    public virtual MapNodeViewModel node2 {
        get {
            return _node2Property.Value;
        }
        set {
            _node2Property.Value = value;
            if (value != null) value.ParentPath = this;
        }
    }
    
    public virtual MapNodeViewModel ParentMapNode {
        get {
            return this._ParentMapNode;
        }
        set {
            _ParentMapNode = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		if (stream.DeepSerialize) stream.SerializeObject("node1", this.node1);
		if (stream.DeepSerialize) stream.SerializeObject("node2", this.node2);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		if (stream.DeepSerialize) this.node1 = stream.DeserializeObject<MapNodeViewModel>("node1");
		if (stream.DeepSerialize) this.node2 = stream.DeserializeObject<MapNodeViewModel>("node2");
    }
    
    public override void Unbind() {
        base.Unbind();
    }
    
    protected override void FillProperties(List<ViewModelPropertyInfo> list) {
        base.FillProperties(list);;
        list.Add(new ViewModelPropertyInfo(_node1Property, true, false, false));
        list.Add(new ViewModelPropertyInfo(_node2Property, true, false, false));
    }
    
    protected override void FillCommands(List<ViewModelCommandInfo> list) {
        base.FillCommands(list);;
    }
}
