// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;


[System.SerializableAttribute()]
public sealed partial class GameSceneManagerSettings {
    
    public string[] _Scenes;
}

// <summary>
// The responsibility of this class is to manage the scenes Initialization, Loading, Transitioning, and Unloading.
// </summary>
public class GameSceneManagerBase : SceneManager {
    
    private MapViewModel _MapInstance;
    
    private OwnerController _OwnerController;
    
    private MapNodeController _MapNodeController;
    
    private CityNodeController _CityNodeController;
    
    private CaveNodeController _CaveNodeController;
    
    private UnitController _UnitController;
    
    private CityCellController _CityCellController;
    
    private EntityController _EntityController;
    
    private MapController _MapController;
    
    private ActionController _ActionController;
    
    public GameSceneManagerSettings _GameSceneManagerSettings = new GameSceneManagerSettings();
    
    [Inject("MapInstance")]
    public virtual MapViewModel MapInstance {
        get {
            if ((this._MapInstance == null)) {
                this._MapInstance = CreateInstanceViewModel<MapViewModel>(MapController, "MapInstance");
            }
            return this._MapInstance;
        }
        set {
            _MapInstance = value;
        }
    }
    
    [Inject()]
    public virtual OwnerController OwnerController {
        get {
            if ((this._OwnerController == null)) {
                this._OwnerController = new OwnerController() { Container = Container };
            }
            return this._OwnerController;
        }
        set {
            _OwnerController = value;
        }
    }
    
    [Inject()]
    public virtual MapNodeController MapNodeController {
        get {
            if ((this._MapNodeController == null)) {
                this._MapNodeController = new MapNodeController() { Container = Container };
            }
            return this._MapNodeController;
        }
        set {
            _MapNodeController = value;
        }
    }
    
    [Inject()]
    public virtual CityNodeController CityNodeController {
        get {
            if ((this._CityNodeController == null)) {
                this._CityNodeController = new CityNodeController() { Container = Container };
            }
            return this._CityNodeController;
        }
        set {
            _CityNodeController = value;
        }
    }
    
    [Inject()]
    public virtual CaveNodeController CaveNodeController {
        get {
            if ((this._CaveNodeController == null)) {
                this._CaveNodeController = new CaveNodeController() { Container = Container };
            }
            return this._CaveNodeController;
        }
        set {
            _CaveNodeController = value;
        }
    }
    
    [Inject()]
    public virtual UnitController UnitController {
        get {
            if ((this._UnitController == null)) {
                this._UnitController = new UnitController() { Container = Container };
            }
            return this._UnitController;
        }
        set {
            _UnitController = value;
        }
    }
    
    [Inject()]
    public virtual CityCellController CityCellController {
        get {
            if ((this._CityCellController == null)) {
                this._CityCellController = new CityCellController() { Container = Container };
            }
            return this._CityCellController;
        }
        set {
            _CityCellController = value;
        }
    }
    
    [Inject()]
    public virtual EntityController EntityController {
        get {
            if ((this._EntityController == null)) {
                this._EntityController = new EntityController() { Container = Container };
            }
            return this._EntityController;
        }
        set {
            _EntityController = value;
        }
    }
    
    [Inject()]
    public virtual MapController MapController {
        get {
            if ((this._MapController == null)) {
                this._MapController = new MapController() { Container = Container };
            }
            return this._MapController;
        }
        set {
            _MapController = value;
        }
    }
    
    [Inject()]
    public virtual ActionController ActionController {
        get {
            if ((this._ActionController == null)) {
                this._ActionController = new ActionController() { Container = Container };
            }
            return this._ActionController;
        }
        set {
            _ActionController = value;
        }
    }
    
    // <summary>
    // This method is the first method to be invoked when the scene first loads. Anything registered here with 'Container' will effectively 
    // be injected on controllers, and instances defined on a subsystem.And example of this would be Container.RegisterInstance<IDataRepository>(new CodeRepository()). Then any property with 
    // the 'Inject' attribute on any controller or view-model will automatically be set by uFrame. 
    // </summary>
    public override void Setup() {
        base.Setup();
        Container.RegisterViewModel<MapViewModel>(MapInstance,"MapInstance");
        Container.RegisterController<OwnerController>(OwnerController);
        Container.RegisterController<MapNodeController>(MapNodeController);
        Container.RegisterController<CityNodeController>(CityNodeController);
        Container.RegisterController<CaveNodeController>(CaveNodeController);
        Container.RegisterController<UnitController>(UnitController);
        Container.RegisterController<CityCellController>(CityCellController);
        Container.RegisterController<EntityController>(EntityController);
        Container.RegisterController<MapController>(MapController);
        Container.RegisterController<ActionController>(ActionController);
        this.Container.InjectAll();
        MapController.Initialize(MapInstance);
    }
    
    public override void Initialize() {
        base.Initialize();
    }
}
